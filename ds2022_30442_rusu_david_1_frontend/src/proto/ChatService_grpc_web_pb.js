/**
 * @fileoverview gRPC-Web generated client stub for SPER_CA_MERGE
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.15.8
// source: ChatService.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.SPER_CA_MERGE = require('./ChatService_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.SPER_CA_MERGE.ChatServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.SPER_CA_MERGE.ChatServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.SPER_CA_MERGE.User,
 *   !proto.SPER_CA_MERGE.JoinResponse>}
 */
const methodDescriptor_ChatService_join = new grpc.web.MethodDescriptor(
  '/SPER_CA_MERGE.ChatService/join',
  grpc.web.MethodType.UNARY,
  proto.SPER_CA_MERGE.User,
  proto.SPER_CA_MERGE.JoinResponse,
  /**
   * @param {!proto.SPER_CA_MERGE.User} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.SPER_CA_MERGE.JoinResponse.deserializeBinary
);


/**
 * @param {!proto.SPER_CA_MERGE.User} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.SPER_CA_MERGE.JoinResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.SPER_CA_MERGE.JoinResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.SPER_CA_MERGE.ChatServiceClient.prototype.join =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/SPER_CA_MERGE.ChatService/join',
      request,
      metadata || {},
      methodDescriptor_ChatService_join,
      callback);
};


/**
 * @param {!proto.SPER_CA_MERGE.User} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.SPER_CA_MERGE.JoinResponse>}
 *     Promise that resolves to the response
 */
proto.SPER_CA_MERGE.ChatServicePromiseClient.prototype.join =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/SPER_CA_MERGE.ChatService/join',
      request,
      metadata || {},
      methodDescriptor_ChatService_join);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.SPER_CA_MERGE.ChatMessage,
 *   !proto.SPER_CA_MERGE.SendMessageResponse>}
 */
const methodDescriptor_ChatService_sendMessage = new grpc.web.MethodDescriptor(
  '/SPER_CA_MERGE.ChatService/sendMessage',
  grpc.web.MethodType.UNARY,
  proto.SPER_CA_MERGE.ChatMessage,
  proto.SPER_CA_MERGE.SendMessageResponse,
  /**
   * @param {!proto.SPER_CA_MERGE.ChatMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.SPER_CA_MERGE.SendMessageResponse.deserializeBinary
);


/**
 * @param {!proto.SPER_CA_MERGE.ChatMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.SPER_CA_MERGE.SendMessageResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.SPER_CA_MERGE.SendMessageResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.SPER_CA_MERGE.ChatServiceClient.prototype.sendMessage =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/SPER_CA_MERGE.ChatService/sendMessage',
      request,
      metadata || {},
      methodDescriptor_ChatService_sendMessage,
      callback);
};


/**
 * @param {!proto.SPER_CA_MERGE.ChatMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.SPER_CA_MERGE.SendMessageResponse>}
 *     Promise that resolves to the response
 */
proto.SPER_CA_MERGE.ChatServicePromiseClient.prototype.sendMessage =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/SPER_CA_MERGE.ChatService/sendMessage',
      request,
      metadata || {},
      methodDescriptor_ChatService_sendMessage);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.SPER_CA_MERGE.ReceiveMessageRequest,
 *   !proto.SPER_CA_MERGE.ChatMessage>}
 */
const methodDescriptor_ChatService_receiveMessage = new grpc.web.MethodDescriptor(
  '/SPER_CA_MERGE.ChatService/receiveMessage',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.SPER_CA_MERGE.ReceiveMessageRequest,
  proto.SPER_CA_MERGE.ChatMessage,
  /**
   * @param {!proto.SPER_CA_MERGE.ReceiveMessageRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.SPER_CA_MERGE.ChatMessage.deserializeBinary
);


/**
 * @param {!proto.SPER_CA_MERGE.ReceiveMessageRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.SPER_CA_MERGE.ChatMessage>}
 *     The XHR Node Readable Stream
 */
proto.SPER_CA_MERGE.ChatServiceClient.prototype.receiveMessage =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/SPER_CA_MERGE.ChatService/receiveMessage',
      request,
      metadata || {},
      methodDescriptor_ChatService_receiveMessage);
};


/**
 * @param {!proto.SPER_CA_MERGE.ReceiveMessageRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.SPER_CA_MERGE.ChatMessage>}
 *     The XHR Node Readable Stream
 */
proto.SPER_CA_MERGE.ChatServicePromiseClient.prototype.receiveMessage =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/SPER_CA_MERGE.ChatService/receiveMessage',
      request,
      metadata || {},
      methodDescriptor_ChatService_receiveMessage);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.SPER_CA_MERGE.Empty,
 *   !proto.SPER_CA_MERGE.UserList>}
 */
const methodDescriptor_ChatService_getAllUsers = new grpc.web.MethodDescriptor(
  '/SPER_CA_MERGE.ChatService/getAllUsers',
  grpc.web.MethodType.UNARY,
  proto.SPER_CA_MERGE.Empty,
  proto.SPER_CA_MERGE.UserList,
  /**
   * @param {!proto.SPER_CA_MERGE.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.SPER_CA_MERGE.UserList.deserializeBinary
);


/**
 * @param {!proto.SPER_CA_MERGE.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.SPER_CA_MERGE.UserList)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.SPER_CA_MERGE.UserList>|undefined}
 *     The XHR Node Readable Stream
 */
proto.SPER_CA_MERGE.ChatServiceClient.prototype.getAllUsers =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/SPER_CA_MERGE.ChatService/getAllUsers',
      request,
      metadata || {},
      methodDescriptor_ChatService_getAllUsers,
      callback);
};


/**
 * @param {!proto.SPER_CA_MERGE.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.SPER_CA_MERGE.UserList>}
 *     Promise that resolves to the response
 */
proto.SPER_CA_MERGE.ChatServicePromiseClient.prototype.getAllUsers =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/SPER_CA_MERGE.ChatService/getAllUsers',
      request,
      metadata || {},
      methodDescriptor_ChatService_getAllUsers);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.SPER_CA_MERGE.User,
 *   !proto.SPER_CA_MERGE.MessagesList>}
 */
const methodDescriptor_ChatService_getMessagesForUser = new grpc.web.MethodDescriptor(
  '/SPER_CA_MERGE.ChatService/getMessagesForUser',
  grpc.web.MethodType.UNARY,
  proto.SPER_CA_MERGE.User,
  proto.SPER_CA_MERGE.MessagesList,
  /**
   * @param {!proto.SPER_CA_MERGE.User} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.SPER_CA_MERGE.MessagesList.deserializeBinary
);


/**
 * @param {!proto.SPER_CA_MERGE.User} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.SPER_CA_MERGE.MessagesList)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.SPER_CA_MERGE.MessagesList>|undefined}
 *     The XHR Node Readable Stream
 */
proto.SPER_CA_MERGE.ChatServiceClient.prototype.getMessagesForUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/SPER_CA_MERGE.ChatService/getMessagesForUser',
      request,
      metadata || {},
      methodDescriptor_ChatService_getMessagesForUser,
      callback);
};


/**
 * @param {!proto.SPER_CA_MERGE.User} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.SPER_CA_MERGE.MessagesList>}
 *     Promise that resolves to the response
 */
proto.SPER_CA_MERGE.ChatServicePromiseClient.prototype.getMessagesForUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/SPER_CA_MERGE.ChatService/getMessagesForUser',
      request,
      metadata || {},
      methodDescriptor_ChatService_getMessagesForUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.SPER_CA_MERGE.ConversationRequest,
 *   !proto.SPER_CA_MERGE.MessagesList>}
 */
const methodDescriptor_ChatService_getConversation = new grpc.web.MethodDescriptor(
  '/SPER_CA_MERGE.ChatService/getConversation',
  grpc.web.MethodType.UNARY,
  proto.SPER_CA_MERGE.ConversationRequest,
  proto.SPER_CA_MERGE.MessagesList,
  /**
   * @param {!proto.SPER_CA_MERGE.ConversationRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.SPER_CA_MERGE.MessagesList.deserializeBinary
);


/**
 * @param {!proto.SPER_CA_MERGE.ConversationRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.SPER_CA_MERGE.MessagesList)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.SPER_CA_MERGE.MessagesList>|undefined}
 *     The XHR Node Readable Stream
 */
proto.SPER_CA_MERGE.ChatServiceClient.prototype.getConversation =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/SPER_CA_MERGE.ChatService/getConversation',
      request,
      metadata || {},
      methodDescriptor_ChatService_getConversation,
      callback);
};


/**
 * @param {!proto.SPER_CA_MERGE.ConversationRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.SPER_CA_MERGE.MessagesList>}
 *     Promise that resolves to the response
 */
proto.SPER_CA_MERGE.ChatServicePromiseClient.prototype.getConversation =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/SPER_CA_MERGE.ChatService/getConversation',
      request,
      metadata || {},
      methodDescriptor_ChatService_getConversation);
};


module.exports = proto.SPER_CA_MERGE;

